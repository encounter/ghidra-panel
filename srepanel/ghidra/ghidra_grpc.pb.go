// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: ghidra.proto

package ghidra

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Ghidra_GetVersion_FullMethodName              = "/ghidra.Ghidra/GetVersion"
	Ghidra_GetRepositoriesAndUsers_FullMethodName = "/ghidra.Ghidra/GetRepositoriesAndUsers"
	Ghidra_GetRepositories_FullMethodName         = "/ghidra.Ghidra/GetRepositories"
	Ghidra_GetRepositoryUser_FullMethodName       = "/ghidra.Ghidra/GetRepositoryUser"
	Ghidra_GetUsers_FullMethodName                = "/ghidra.Ghidra/GetUsers"
	Ghidra_AddUser_FullMethodName                 = "/ghidra.Ghidra/AddUser"
	Ghidra_RemoveUser_FullMethodName              = "/ghidra.Ghidra/RemoveUser"
	Ghidra_SetUserPermission_FullMethodName       = "/ghidra.Ghidra/SetUserPermission"
	Ghidra_AuthenticateUser_FullMethodName        = "/ghidra.Ghidra/AuthenticateUser"
)

// GhidraClient is the client API for Ghidra service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GhidraClient interface {
	GetVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Version, error)
	GetRepositoriesAndUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRepositoriesAndUsersReply, error)
	GetRepositories(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRepositoriesReply, error)
	GetRepositoryUser(ctx context.Context, in *GetRepositoryUserRequest, opts ...grpc.CallOption) (*GetRepositoryUserReply, error)
	GetUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUsersReply, error)
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveUser(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetUserPermission(ctx context.Context, in *SetUserPermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AuthenticateUser(ctx context.Context, in *AuthenticateUserRequest, opts ...grpc.CallOption) (*AuthenticateUserReply, error)
}

type ghidraClient struct {
	cc grpc.ClientConnInterface
}

func NewGhidraClient(cc grpc.ClientConnInterface) GhidraClient {
	return &ghidraClient{cc}
}

func (c *ghidraClient) GetVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Version, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Version)
	err := c.cc.Invoke(ctx, Ghidra_GetVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ghidraClient) GetRepositoriesAndUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRepositoriesAndUsersReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRepositoriesAndUsersReply)
	err := c.cc.Invoke(ctx, Ghidra_GetRepositoriesAndUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ghidraClient) GetRepositories(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRepositoriesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRepositoriesReply)
	err := c.cc.Invoke(ctx, Ghidra_GetRepositories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ghidraClient) GetRepositoryUser(ctx context.Context, in *GetRepositoryUserRequest, opts ...grpc.CallOption) (*GetRepositoryUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRepositoryUserReply)
	err := c.cc.Invoke(ctx, Ghidra_GetRepositoryUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ghidraClient) GetUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUsersReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsersReply)
	err := c.cc.Invoke(ctx, Ghidra_GetUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ghidraClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Ghidra_AddUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ghidraClient) RemoveUser(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Ghidra_RemoveUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ghidraClient) SetUserPermission(ctx context.Context, in *SetUserPermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Ghidra_SetUserPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ghidraClient) AuthenticateUser(ctx context.Context, in *AuthenticateUserRequest, opts ...grpc.CallOption) (*AuthenticateUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthenticateUserReply)
	err := c.cc.Invoke(ctx, Ghidra_AuthenticateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GhidraServer is the server API for Ghidra service.
// All implementations must embed UnimplementedGhidraServer
// for forward compatibility
type GhidraServer interface {
	GetVersion(context.Context, *emptypb.Empty) (*Version, error)
	GetRepositoriesAndUsers(context.Context, *emptypb.Empty) (*GetRepositoriesAndUsersReply, error)
	GetRepositories(context.Context, *emptypb.Empty) (*GetRepositoriesReply, error)
	GetRepositoryUser(context.Context, *GetRepositoryUserRequest) (*GetRepositoryUserReply, error)
	GetUsers(context.Context, *emptypb.Empty) (*GetUsersReply, error)
	AddUser(context.Context, *AddUserRequest) (*emptypb.Empty, error)
	RemoveUser(context.Context, *RemoveUserRequest) (*emptypb.Empty, error)
	SetUserPermission(context.Context, *SetUserPermissionRequest) (*emptypb.Empty, error)
	AuthenticateUser(context.Context, *AuthenticateUserRequest) (*AuthenticateUserReply, error)
	mustEmbedUnimplementedGhidraServer()
}

// UnimplementedGhidraServer must be embedded to have forward compatible implementations.
type UnimplementedGhidraServer struct {
}

func (UnimplementedGhidraServer) GetVersion(context.Context, *emptypb.Empty) (*Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedGhidraServer) GetRepositoriesAndUsers(context.Context, *emptypb.Empty) (*GetRepositoriesAndUsersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepositoriesAndUsers not implemented")
}
func (UnimplementedGhidraServer) GetRepositories(context.Context, *emptypb.Empty) (*GetRepositoriesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepositories not implemented")
}
func (UnimplementedGhidraServer) GetRepositoryUser(context.Context, *GetRepositoryUserRequest) (*GetRepositoryUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepositoryUser not implemented")
}
func (UnimplementedGhidraServer) GetUsers(context.Context, *emptypb.Empty) (*GetUsersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedGhidraServer) AddUser(context.Context, *AddUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedGhidraServer) RemoveUser(context.Context, *RemoveUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (UnimplementedGhidraServer) SetUserPermission(context.Context, *SetUserPermissionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserPermission not implemented")
}
func (UnimplementedGhidraServer) AuthenticateUser(context.Context, *AuthenticateUserRequest) (*AuthenticateUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateUser not implemented")
}
func (UnimplementedGhidraServer) mustEmbedUnimplementedGhidraServer() {}

// UnsafeGhidraServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GhidraServer will
// result in compilation errors.
type UnsafeGhidraServer interface {
	mustEmbedUnimplementedGhidraServer()
}

func RegisterGhidraServer(s grpc.ServiceRegistrar, srv GhidraServer) {
	s.RegisterService(&Ghidra_ServiceDesc, srv)
}

func _Ghidra_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GhidraServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ghidra_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GhidraServer).GetVersion(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ghidra_GetRepositoriesAndUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GhidraServer).GetRepositoriesAndUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ghidra_GetRepositoriesAndUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GhidraServer).GetRepositoriesAndUsers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ghidra_GetRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GhidraServer).GetRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ghidra_GetRepositories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GhidraServer).GetRepositories(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ghidra_GetRepositoryUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepositoryUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GhidraServer).GetRepositoryUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ghidra_GetRepositoryUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GhidraServer).GetRepositoryUser(ctx, req.(*GetRepositoryUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ghidra_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GhidraServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ghidra_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GhidraServer).GetUsers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ghidra_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GhidraServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ghidra_AddUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GhidraServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ghidra_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GhidraServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ghidra_RemoveUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GhidraServer).RemoveUser(ctx, req.(*RemoveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ghidra_SetUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GhidraServer).SetUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ghidra_SetUserPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GhidraServer).SetUserPermission(ctx, req.(*SetUserPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ghidra_AuthenticateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GhidraServer).AuthenticateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ghidra_AuthenticateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GhidraServer).AuthenticateUser(ctx, req.(*AuthenticateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ghidra_ServiceDesc is the grpc.ServiceDesc for Ghidra service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ghidra_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ghidra.Ghidra",
	HandlerType: (*GhidraServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _Ghidra_GetVersion_Handler,
		},
		{
			MethodName: "GetRepositoriesAndUsers",
			Handler:    _Ghidra_GetRepositoriesAndUsers_Handler,
		},
		{
			MethodName: "GetRepositories",
			Handler:    _Ghidra_GetRepositories_Handler,
		},
		{
			MethodName: "GetRepositoryUser",
			Handler:    _Ghidra_GetRepositoryUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _Ghidra_GetUsers_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _Ghidra_AddUser_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _Ghidra_RemoveUser_Handler,
		},
		{
			MethodName: "SetUserPermission",
			Handler:    _Ghidra_SetUserPermission_Handler,
		},
		{
			MethodName: "AuthenticateUser",
			Handler:    _Ghidra_AuthenticateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ghidra.proto",
}
